--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -152,6 +152,7 @@ snd-soc-pcm3168a-objs := pcm3168a.o
 snd-soc-pcm3168a-i2c-objs := pcm3168a-i2c.o
 snd-soc-pcm3168a-spi-objs := pcm3168a-spi.o
 snd-soc-pcm5102a-objs := pcm5102a.o
+snd-soc-pt2259-objs := pt2259.o
 snd-soc-pcm512x-objs := pcm512x.o
 snd-soc-pcm512x-i2c-objs := pcm512x-i2c.o
 snd-soc-pcm512x-spi-objs := pcm512x-spi.o
@@ -461,6 +462,7 @@ obj-$(CONFIG_SND_SOC_PCM3168A)	+= snd-so
 obj-$(CONFIG_SND_SOC_PCM3168A_I2C)	+= snd-soc-pcm3168a-i2c.o
 obj-$(CONFIG_SND_SOC_PCM3168A_SPI)	+= snd-soc-pcm3168a-spi.o
 obj-$(CONFIG_SND_SOC_PCM5102A)	+= snd-soc-pcm5102a.o
+obj-$(CONFIG_SND_SOC_PT2259)    += snd-soc-pt2259.o
 obj-$(CONFIG_SND_SOC_PCM512x)	+= snd-soc-pcm512x.o
 obj-$(CONFIG_SND_SOC_PCM512x_I2C)	+= snd-soc-pcm512x-i2c.o
 obj-$(CONFIG_SND_SOC_PCM512x_SPI)	+= snd-soc-pcm512x-spi.o
--- /dev/null
+++ b/sound/soc/codecs/pt2259.c
@@ -0,0 +1,351 @@
+/*
+ * pt2259.c  --  PT2259 ALSA Soc Audio driver
+ *
+ * Copyright 2021 Laurent Denizot
+ *
+ * Authors:  Laurent Denizot <laurent@denizot.link>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/pm.h>
+#include <linux/i2c.h>
+#include <sound/i2c.h>
+#include <linux/of_device.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/initval.h>
+#include <sound/tlv.h>
+
+#define PT2259_RATES		(SNDRV_PCM_RATE_8000 | \
+				SNDRV_PCM_RATE_11025 | \
+				SNDRV_PCM_RATE_16000 | \
+				SNDRV_PCM_RATE_22050 | \
+				SNDRV_PCM_RATE_32000 | \
+				SNDRV_PCM_RATE_44100 | \
+				SNDRV_PCM_RATE_48000)
+
+#define PT2259_FORMAT		(SNDRV_PCM_FMTBIT_S16_LE | \
+				SNDRV_PCM_FMTBIT_S24_LE | \
+				SNDRV_PCM_FMTBIT_S32_LE)
+
+/* sequence begin #0 */
+#define	PT2259_BEGIN		0x44	/* before transmission */
+
+/* sequence reset #1 + stop */ 
+#define PT2259_RESET            0xF0    /* byte Device reset */
+
+/* sequence set #1 */
+#define PT2259_UNMUTE		0x74    /* byte  - Unmute */
+#define PT2259_MUTE_R		0x01    /* byte  - Mute R */
+#define PT2259_MUTE_L           0x02    /* byte  - Mute L */
+
+/* sequence set #2 */
+#define PT2259_R_VOL_10DB       0xE0    /* byte - Channel R Volume Control -10 db */
+#define PT2259_L_VOL_10DB       0xE0    /* byte - Channel L Volume Control -10 db */
+
+/* sequence set #3 + stop */
+#define PT2259_R_VOL_1DB        0xD0    /* byte - Channel R Volume Control -1 db */
+#define PT2259_L_VOL_1DB        0xD0    /* byte - Channel L Volume Control -1 db */
+
+/* pseudo registers */
+#define	PT2259_PSREG_R_ATTEN_DB	0x01	/* pr01	- Attenuation in db right channel */
+#define PT2259_PSREG_L_ATTEN_DB	0x02    /* pr02 - Attenuation in db left channel */
+#define PT2259_PSREG_R_MUTE	0x03    /* pr03 - Mute right channel */
+#define PT2259_PSREG_L_MUTE     0x04    /* pr04 - Mute left channel */
+
+/* initial values */
+#define PT2259_ATTN_MAX		0x4f	/* max attenuation in db */
+#define PT2259_MUTE_TRUE	0x01    /* max attenuation in db */
+#define PT2259_MUTE_FALSE	0x00    /* max attenuation in db */
+
+static const struct reg_default pt2259_reg_defaults[] = {
+	{ PT2259_PSREG_R_ATTEN_DB, PT2259_ATTN_MAX },	/* pr01  - init value to -79 db */
+	{ PT2259_PSREG_L_ATTEN_DB, PT2259_ATTN_MAX },   /* pr02  - init value to -79 db */
+	{ PT2259_PSREG_R_MUTE, PT2259_MUTE_TRUE },	/* pr01  - mute to true */
+	{ PT2259_PSREG_L_MUTE, PT2259_MUTE_TRUE },      /* pr01  - mute to true */
+};
+
+/* Private data for the PT2259 */
+struct  pt2259_private {
+	struct regmap	*regmap;
+	unsigned char	volume[2];
+	unsigned int	mute[2];
+};
+
+static const struct regmap_range pt2259_write_regs_range[] = {
+        regmap_reg_range(PT2259_PSREG_R_ATTEN_DB,  PT2259_PSREG_L_MUTE),
+};
+
+static const struct regmap_access_table pt2259_write_regs = {
+        .yes_ranges =    pt2259_write_regs_range,
+        .n_yes_ranges =  ARRAY_SIZE(pt2259_write_regs_range),
+};
+
+static const struct regmap_range pt2259_read_regs_range[] = {
+        regmap_reg_range(PT2259_PSREG_R_ATTEN_DB,  PT2259_PSREG_L_MUTE),
+};
+
+static const struct regmap_access_table pt2259_read_regs = {
+        .no_ranges =    pt2259_read_regs_range,
+        .n_no_ranges =  ARRAY_SIZE(pt2259_read_regs_range),
+};
+
+static const struct regmap_range pt2259_volatile_regs_range[] = {
+        regmap_reg_range(PT2259_PSREG_R_ATTEN_DB,  PT2259_PSREG_L_MUTE),
+};
+
+static const struct regmap_access_table pt2259_volatile_regs = {
+        .yes_ranges =   pt2259_volatile_regs_range,
+        .n_yes_ranges = ARRAY_SIZE(pt2259_volatile_regs_range),
+};
+
+static int pt2259_reg_read(void *context, unsigned int reg,
+			    unsigned int *value)
+{
+	//struct i2c_client *client = context;
+        //struct pt2259_private *pt2259 = i2c_get_clientdata(client);
+	
+	return 0;
+}
+
+static int pt2259_reg_write(void *context, unsigned int reg,
+			     unsigned int value)
+{
+	struct i2c_client *client = context;
+	//struct pt2259_private *pt2259 = i2c_get_clientdata(client);
+        unsigned char	bytes[3];
+        int		n=0;
+	unsigned char	basereg_10, basereg_1, tens, ones, mute;
+
+        switch (reg) {
+        case    PT2259_PSREG_R_ATTEN_DB:
+		basereg_10 = PT2259_R_VOL_10DB;
+		basereg_1 = PT2259_R_VOL_1DB;
+
+	case    PT2259_PSREG_L_ATTEN_DB:
+		basereg_10 = PT2259_L_VOL_10DB;
+		basereg_1 = PT2259_L_VOL_1DB;
+
+		n=3;
+		tens = value / 10;
+		ones = value % 10;
+
+		bytes[0] = PT2259_UNMUTE;
+		bytes[1] = basereg_10 | tens;
+		bytes[2] = basereg_1 | ones;
+
+		break;
+	
+	case    PT2259_PSREG_R_MUTE:
+		mute = PT2259_MUTE_R;
+	case	PT2259_PSREG_L_MUTE:
+		mute = PT2259_MUTE_L;
+		n=1;
+
+		bytes[0] = PT2259_UNMUTE + mute;
+		break;
+
+        default:
+		return -EINVAL;
+        }
+
+	if (i2c_master_send(client, bytes, n) != n) {
+                snd_printk(KERN_ERR "PT2259 access failed\n");
+                return -EIO;
+        }
+
+	return 0;
+}
+/*
+static bool pt2259_readable_register(struct device *dev, unsigned int reg)
+{
+	return false;
+}
+
+static bool pt2259_writeable_register(struct device *dev, unsigned int reg)
+{
+	return true;
+}
+*/
+static int pt2259_pcm_hw_params(struct snd_pcm_substream *substream,
+                            struct snd_pcm_hw_params *params,
+                            struct snd_soc_dai *dai)
+{
+	return 0;
+}
+
+static int pt2259_set_dai_fmt(struct snd_soc_dai *codec_dai,
+                              unsigned int format)
+{
+        return 0;
+}
+
+static int pt2259_digital_mute(struct snd_soc_dai *dai, int mute)
+{
+	//struct snd_soc_codec *codec = dai->codec;
+	//int reg;
+
+	/*
+
+	reg = 0;
+	if (mute)
+		reg = MUTE_AB_MASK;
+
+	return snd_soc_update_bits(codec, PT2259_MUTE, MUTE_AB_MASK, reg);
+	*/
+	return 0;
+}
+
+static DECLARE_TLV_DB_SCALE(pt2259_db_scale, -7900, 100, 0);
+
+static const struct snd_kcontrol_new pt2259_snd_controls[] = {
+	SOC_DOUBLE_R_TLV("Line Out Playback Volume",
+				PT2259_PSREG_L_ATTEN_DB, PT2259_PSREG_R_ATTEN_DB, 0, PT2259_ATTN_MAX, 1, pt2259_db_scale),
+};
+
+static const struct snd_soc_dapm_widget pt2259_dapm_widgets[] = {
+	SND_SOC_DAPM_PGA("Gain Controler", 0x0, 0, 0, NULL, 0),
+	//SND_SOC_DAPM_DAC("Gain Controler", NULL, SND_SOC_NOPM, 0, 0),
+
+	SND_SOC_DAPM_OUTPUT("VC Out"),
+};
+
+static const struct snd_soc_dapm_route pt2259_routes[] = {
+        {"Playback", NULL, "VC Out"},
+
+        {"VC Out", NULL, "Gain Controler"},
+};
+
+static const struct snd_soc_dai_ops pt2259_dai_ops = {
+	.hw_params      = pt2259_pcm_hw_params,
+	.set_fmt        = pt2259_set_dai_fmt,
+	.digital_mute	= pt2259_digital_mute,
+};
+
+static struct snd_soc_dai_driver pt2259_dai = {
+	.name = "pt2259_hifi",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = PT2259_RATES,
+		.formats = PT2259_FORMAT,
+	},
+	.ops = &pt2259_dai_ops,
+	.symmetric_rates = 1,
+};
+
+static const struct snd_soc_component_driver soc_component_dev_pt2259 = {
+	.controls		= pt2259_snd_controls,
+	.num_controls		= ARRAY_SIZE(pt2259_snd_controls),
+	.dapm_widgets		= pt2259_dapm_widgets,
+	.num_dapm_widgets	= ARRAY_SIZE(pt2259_dapm_widgets),
+	.dapm_routes		= pt2259_routes,
+	.num_dapm_routes	= ARRAY_SIZE(pt2259_routes),
+};
+
+static const struct regmap_config pt2259_regmap = {
+	.reg_bits		= 8,
+	.val_bits		= 8,
+	.max_register		= PT2259_PSREG_L_MUTE,
+	.reg_read		= pt2259_reg_read,
+	.reg_write		= pt2259_reg_write,
+	.reg_defaults		= pt2259_reg_defaults,
+	.num_reg_defaults	= ARRAY_SIZE(pt2259_reg_defaults),
+	//.readable_reg		= pt2259_readable_register,
+	//.writeable_reg	= pt2259_writeable_register,
+	.cache_type		= REGCACHE_RBTREE,
+	.wr_table             	= &pt2259_write_regs,
+	.rd_table               = &pt2259_read_regs,
+	//.volatile_table         = &pt2259_volatile_regs,
+};
+
+static int pt2259_i2c_probe(struct i2c_client *client,
+				      const struct i2c_device_id *id)
+{
+	struct pt2259_private *pt2259;
+	int ret;
+	unsigned char	byte=PT2259_RESET;
+
+	pt2259 = devm_kzalloc(&client->dev, sizeof(*pt2259), GFP_KERNEL);
+	if (!pt2259)
+		return -ENOMEM;
+
+        //pt2259->regmap = devm_regmap_init_i2c(client, &pt2259_regmap);
+	pt2259->regmap = devm_regmap_init(&client->dev, NULL, client, &pt2259_regmap);
+        if (IS_ERR(pt2259->regmap)) {
+                ret = PTR_ERR(pt2259->regmap);
+                dev_err(&client->dev, "regmap_init() failed: %d\n", ret);
+                return ret;
+        }
+
+	/* keep i2c client to access volume */
+	i2c_set_clientdata(client, pt2259);
+
+
+	if (i2c_master_send(client, &byte, 1) != 1) {
+                snd_printk(KERN_ERR "PT2259 access failed\n");
+                return -EIO;
+        }
+
+	return snd_soc_register_component(&client->dev, &soc_component_dev_pt2259,
+		&pt2259_dai, 1);
+}
+
+static int pt2259_i2c_remove(struct i2c_client *client)
+{
+	struct pt2259_private *pt2259 = i2c_get_clientdata(client);
+	devm_kfree(&client->dev, pt2259);
+
+	snd_soc_unregister_codec(&client->dev);
+
+	/* Hold down reset */
+
+	return 0;
+}
+
+static const struct of_device_id pt2259_of_match[] = {
+	{ .compatible = "princeton,pt2259", },
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, pt2259_of_match);
+
+static const struct i2c_device_id pt2259_i2c_id[] = {
+	{"pt2259", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, pt2259_i2c_id);
+
+static struct i2c_driver pt2259_i2c_driver = {
+	.driver = {
+		.name		= "pt2259",
+		.of_match_table	= pt2259_of_match,
+	},
+	.id_table	= pt2259_i2c_id,
+	.probe		= pt2259_i2c_probe,
+	.remove		= pt2259_i2c_remove,
+};
+
+module_i2c_driver(pt2259_i2c_driver);
+
+MODULE_AUTHOR("Laurent Denizot <laurent@denizot.link>");
+MODULE_DESCRIPTION("PT2259 ALSA SoC Codec Driver");
+MODULE_LICENSE("GPL");
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -73,6 +73,7 @@ config SND_SOC_ALL_CODECS
 	imply SND_SOC_CS43130
 	imply SND_SOC_CS4341
 	imply SND_SOC_CS4349
+	imply SND_SOC_PT2259
 	imply SND_SOC_CS47L15
 	imply SND_SOC_CS47L24
 	imply SND_SOC_CS47L35
@@ -657,6 +658,10 @@ config SND_SOC_CS4349
 	tristate "Cirrus Logic CS4349 CODEC"
 	depends on I2C
 
+config SND_SOC_PT2259
+        tristate "PRINCETON PT2259 CODEC / CANTIC"
+        depends on I2C
+
 config SND_SOC_CS47L15
 	tristate
 	depends on MFD_CS47L15
@@ -1007,7 +1012,7 @@ config SND_SOC_PCM3168A_SPI
 	select REGMAP_SPI
 
 config SND_SOC_PCM5102A
-	tristate
+	tristate "TI PCM 5012A / CANTIC PLAY"
 
 config SND_SOC_PCM512x
 	tristate
